#!/usr/bin/env python3

##### if a appimage is removed we get inconsistency in id and the total_entries which uses simple i+1 , i-1 will break since some entries would be like 1,2,3,5
##### store a id key in each items dict so i can access each id when i am uisng .values() in the uninstall_appimage loop so i can access the inner values in a single look up and still get access to ids
##### check gemini for more info about above comments
import sys,os,shutil,json
from pathlib import Path

print(sys.argv)

# functions 

def cmdhelp(files_list):
 print("This function will print data about cmd 'Dwn'")

  #parse data
def parsedata(function_to_execute,flags,functions,files_list):
 return_func = cmdhelp
 for args in sys.argv[1:]:
  if args in flags:
   flags[args] = True
  elif args in functions:
   return_func = functions[args]
  else:
   files_list.append(args)
 return return_func

  #main functions
def install(files_list):
 print("---Install function is running---")
 
 if not files_list:
  print("No file as argument given")
  return

 if flags["-long"]:
  print(flags,functions,files_list)
 
 for file in files_list:
  _ ,extension = os.path.splitext(file)
 
  if extension == ".AppImage":
   install_appimage(file)

 print("---End of Install---")

def list_programs(file):
 with open("dwn_data.json","r") as file:
  json_data = json.load(file)
  json_data = json_data["items"]
  json_data = json.dumps(json_data,indent=3)
  print(json_data)

def create_json(file_list):
 json_struct = {
        "metadata": {
            "total_entries": 0,
            "next_new_id": 0
        },
        "items": {} 
    }

 with open("dwn_data.json","w") as file:
  json.dump(json_struct,file,indent=4)


def uninstall(files_list):
 print("---Uninstall function is running---")
 if not files_list:
  print("No file as argument given")
  return  
 for file in files_list:
  _,extension = os.path.splitext(file)
 
  if extension == ".AppImage":
   uninstall_appimage(file)
 
 print("---End of Uninstall---")

  #helper functions
def install_appimage(file):
 #for now only work for single file given 
 try:
  shutil.move(file,appimage_loc)

  new_entry = {"name":file,"location":appimage_loc}
  record_in_json(new_entry)
 except Exception as e:
  print(f"Error Ocurred while Installing AppImage: {e}")

def uninstall_appimage(filename): 

 with open("dwn_data.json","r") as file:
  json_data = json.load(file)
  for fileindex in json_data["items"]:
   if json_data["items"][fileindex]["name"] == filename:
    print(f"{fileindex} : {filename}") 
 
 file_to_remove = input("Enter corresponding id to Uninstall: ") 
 file_loc = json_data["items"][file_to_remove]["location"]
  
 os.remove(os.path.join(file_loc,filename))

 remove_from_record(file_to_remove) 

def record_in_json(new_entry):
 with open("dwn_data.json","r+") as file:
  json_data = json.load(file)
  id = int(json_data["metadata"]["next_new_id"])
  json_data["items"][id] = new_entry
  json_data["metadata"]["total_entries"] = int(json_data["metadata"]["total_entries"])+1
  json_data["metadata"]["next_new_id"] = int(json_data["metadata"]["next_new_id"])+1
  
  file.seek(0)
  json.dump(json_data,file,indent=4)
  file.truncate() 

def remove_from_record(id):
 with open("dwn_data.json","r+") as file:
  json_data = json.load(file)
  print(json_data["items"].pop(id))
  json_data["metadata"]["total_entries"] = int(json_data["metadata"]["total_entries"]) - 1
 
  file.seek(0)
  json.dump(json_data,file,indent=4)
  file.truncate()

def if_json_exist(path_to_json):
 json_file = Path(path_to_json)
 if json_file.exists():
  return True
 else:
  return False

# Variable and dicts for flags and functions
functions = {
"--install":install,
"--list":list_programs,
"--uninstall":uninstall,
"--initjson":create_json
 }
flags = {
 "-long":False
}
files_list = []
function_to_execute = cmdhelp
appimage_loc = os.path.expanduser("~")+"/Desktop/dwn/application"
path_to_json = "./dwn_data.json"
#function calls

function_to_execute = parsedata(function_to_execute,flags,functions,files_list)
print(function_to_execute)
if (not if_json_exist(path_to_json)) and function_to_execute != create_json:
 print("Json file necessary for Storing data not found. Run 'dwn --initjson' to resolve error")
 sys.exit(1)

function_to_execute(files_list)
